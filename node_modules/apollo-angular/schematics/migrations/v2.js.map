{"version":3,"file":"v2.js","sourceRoot":"","sources":["../../../schematics/migrations/v2.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { chain, Rule, SchematicContext, Tree, UpdateRecorder } from '@angular-devkit/schematics';\nimport { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';\nimport { createDependenciesMap } from '../install/index';\nimport { getJsonFile } from '../utils';\n\nexport default function (): Rule {\n  return chain([migrateImports, migrateTsConfig, migrateDependencies]);\n}\n\nfunction migrateDependencies() {\n  return (tree: Tree, context: SchematicContext) => {\n    const packageJsonPath = 'package.json';\n    const packageJson = getJsonFile(tree, packageJsonPath);\n\n    packageJson.dependencies = packageJson.dependencies || {};\n\n    const dependenciesMap = createDependenciesMap({});\n\n    for (const dependency in dependenciesMap) {\n      if (dependenciesMap.hasOwnProperty(dependency)) {\n        const version = dependenciesMap[dependency];\n\n        packageJson.dependencies[dependency] = version;\n      }\n    }\n\n    const packagesToRemove = [\n      'graphql-tag',\n      'apollo-client',\n      'apollo-cache',\n      'apollo-cache-inmemory',\n      'apollo-utilities',\n      'apollo-link',\n      'apollo-link-http',\n      'apollo-link-batch-http',\n      'apollo-link-context',\n      'apollo-link-error',\n      'apollo-link-schema',\n      'apollo-link-ws',\n      'apollo-angular-link-http',\n      'apollo-angular-link-http-batch',\n      'apollo-angular-link-headers',\n    ];\n\n    const removedPackages: string[] = [];\n\n    packagesToRemove.forEach(packageName => {\n      let removed = false;\n\n      if (packageJson.dependencies?.[packageName]) {\n        delete packageJson.dependencies[packageName];\n        removed = true;\n      }\n\n      if (packageJson.devDependencies?.[packageName]) {\n        delete packageJson.devDependencies[packageName];\n        removed = true;\n      }\n\n      if (removed) {\n        removedPackages.push(packageName);\n      }\n    });\n\n    removedPackages.forEach(packageName => {\n      context.logger.info(`Removed ${packageName} dependency`);\n    });\n\n    // save the changed file\n    tree.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n    // schedule `npm install`\n    context.addTask(new NodePackageInstallTask());\n\n    return tree;\n  };\n}\n\nexport async function migrateTsConfig(tree: Tree) {\n  const tsconfigPath = 'tsconfig.json';\n  const tsconfig = getJsonFile(tree, tsconfigPath);\n  const compilerOptions: ts.CompilerOptions = tsconfig.compilerOptions;\n\n  if (compilerOptions) {\n    compilerOptions.allowSyntheticDefaultImports = true;\n    tree.overwrite(tsconfigPath, JSON.stringify(tsconfig, null, 2));\n  } else {\n    const tsconfigBasePath = 'tsconfig.base.json';\n    const tsconfigBase = getJsonFile(tree, tsconfigBasePath);\n    const baseCompilerOptions: ts.CompilerOptions = tsconfigBase.compilerOptions;\n\n    if (baseCompilerOptions) {\n      baseCompilerOptions.allowSyntheticDefaultImports = true;\n      tree.overwrite(tsconfigBasePath, JSON.stringify(tsconfigBase, null, 2));\n    }\n  }\n}\n\nfunction getIdentifiers(\n  namedBindings: ts.NamedImportBindings,\n  onIdentifier: (event: { name: string; alias?: string }) => void,\n) {\n  namedBindings.forEachChild(named => {\n    if (ts.isImportSpecifier(named)) {\n      const name =\n        named.propertyName && typeof named.propertyName !== 'undefined'\n          ? named.propertyName.escapedText.toString()\n          : named.name.escapedText.toString();\n\n      onIdentifier({\n        name,\n        alias: name === named.name.escapedText.toString() ? undefined : name,\n      });\n    }\n  });\n}\n\nexport async function migrateImports(tree: Tree) {\n  tree.visit(path => {\n    if (path.includes('node_modules') || !path.endsWith('.ts')) {\n      return;\n    }\n\n    const importsMap: Record<\n      string,\n      Array<{\n        name: string;\n        alias?: string;\n      }>\n    > = {};\n\n    function collectIdentifiers(packageName: string, namedBindings: ts.NamedImportBindings) {\n      getIdentifiers(namedBindings, ({ name, alias }) => {\n        if (!importsMap[packageName]) {\n          importsMap[packageName] = [];\n        }\n\n        importsMap[packageName].push({\n          name,\n          alias,\n        });\n      });\n    }\n\n    function redirectImport({\n      source,\n      target,\n      modulePath,\n      statement,\n      recorder,\n    }: {\n      source: string;\n      target: string;\n      modulePath: string;\n      statement: any;\n      recorder: UpdateRecorder;\n    }) {\n      if (modulePath === source) {\n        if (statement.importClause.namedBindings) {\n          collectIdentifiers(target, statement.importClause.namedBindings);\n        }\n\n        recorder.remove(statement.getStart(), statement.getWidth());\n      }\n    }\n\n    function redirectDefaultImport({\n      identifier,\n      source,\n      target,\n      modulePath,\n      statement,\n      recorder,\n    }: {\n      identifier: string;\n      source: string;\n      target: string;\n      modulePath: string;\n      statement: any;\n      recorder: UpdateRecorder;\n    }) {\n      if (modulePath === source && statement.importClause.name) {\n        if (!importsMap[target]) {\n          importsMap[target] = [];\n        }\n\n        const alias = statement.importClause.name.escapedText.toString();\n\n        importsMap[target].push({\n          name: identifier,\n          alias: alias !== identifier ? alias : undefined,\n        });\n\n        recorder.remove(statement.getStart(), statement.getWidth());\n      }\n    }\n\n    const sourceFile = ts.createSourceFile(\n      path,\n      tree.read(path).toString(),\n      ts.ScriptTarget.Latest,\n      true,\n    );\n\n    const recorder = tree.beginUpdate(path);\n\n    sourceFile.statements.forEach(statement => {\n      if (ts.isImportDeclaration(statement) && ts.isStringLiteral(statement.moduleSpecifier)) {\n        const nodeText = statement.moduleSpecifier.getText(sourceFile);\n        const modulePath = statement.moduleSpecifier\n          .getText(sourceFile)\n          .substr(1, nodeText.length - 2);\n\n        redirectImport({\n          source: 'apollo-cache-inmemory',\n          target: '@apollo/client/core',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-client',\n          target: '@apollo/client/core',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link',\n          target: '@apollo/client/core',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-cache',\n          target: '@apollo/client/core',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-angular-link-http',\n          target: 'apollo-angular/http',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-angular-link-http-batch',\n          target: 'apollo-angular/http',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-utilities',\n          target: '@apollo/client/utilities',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-http',\n          target: '@apollo/client/link/http',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-batch-http',\n          target: '@apollo/client/link/batch-http',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-context',\n          target: '@apollo/client/link/context',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-error',\n          target: '@apollo/client/link/error',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-schema',\n          target: '@apollo/client/link/schema',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-link-ws',\n          target: '@apollo/client/link/ws',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-angular',\n          target: 'apollo-angular',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectImport({\n          source: 'apollo-angular-link-headers',\n          target: 'apollo-angular/headers',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectDefaultImport({\n          identifier: 'ApolloClient',\n          source: 'apollo-client',\n          target: '@apollo/client/core',\n          recorder,\n          statement,\n          modulePath,\n        });\n\n        redirectDefaultImport({\n          identifier: 'gql',\n          source: 'graphql-tag',\n          target: 'apollo-angular',\n          recorder,\n          statement,\n          modulePath,\n        });\n      }\n    });\n\n    const importSources = Object.keys(importsMap);\n\n    importSources.forEach(importSource => {\n      const props = importsMap[importSource]\n        .filter((im, i, all) => {\n          if (im.alias) {\n            return all.findIndex(f => f.alias === im.alias) === i;\n          }\n\n          return all.findIndex(f => f.name === im.name) === i;\n        })\n        .map(im => (im.alias ? `${im.name} as ${im.alias}` : im.name))\n        .join(', ');\n      recorder.insertLeft(sourceFile.getStart(), `import {${props}} from '${importSource}';\\n`);\n    });\n\n    if (importSources.length) {\n      tree.commitUpdate(recorder);\n    }\n  });\n}\n"]}